{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI Engineering MVP Template","text":"<p>Welcome to the documentation for the AI Engineering MVP Template. This template provides a foundation for building AI-powered applications with a modern technology stack.</p>"},{"location":"#template-overview","title":"Template Overview","text":"<p>This template is designed to help you quickly bootstrap AI-powered MVP applications with a professional, production-ready foundation. It includes:</p>"},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>Frontend: Next.js with TypeScript</li> <li>Backend: FastAPI with Python 3.12</li> <li>Containerization: Docker for development and production</li> <li>CI/CD: GitHub Actions for continuous integration</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>The template follows a microservices architecture with two main components:</p> <ol> <li>Frontend Service: A Next.js application that provides the user interface</li> <li>Backend Service: A FastAPI application that provides the API endpoints</li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To start using this template, see the Getting Started guide.</p>"},{"location":"#development-guides","title":"Development Guides","text":"<ul> <li>Backend Development</li> <li>Frontend Development</li> <li>Docker and Deployment</li> </ul>"},{"location":"backend-development/","title":"Backend Development","text":"<p>This guide covers the key aspects of backend development using the FastAPI framework in this template.</p>"},{"location":"backend-development/#environment-setup","title":"Environment Setup","text":""},{"location":"backend-development/#setting-up-with-uv","title":"Setting Up with uv","text":"<p>We recommend using uv for Python package management, which is faster than pip and provides better dependency resolution.</p> <pre><code># Install uv if you don't have it\npip install uv\n\n# Navigate to the backend directory\ncd backend\n\n# Create and activate a virtual environment\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies including development packages\nuv pip install -e \".[dev]\"\n</code></pre>"},{"location":"backend-development/#running-the-backend-server","title":"Running the Backend Server","text":"<pre><code># With the virtual environment activated\nuvicorn api.main:app --reload\n</code></pre>"},{"location":"backend-development/#project-structure","title":"Project Structure","text":"<p>The backend is organized as follows:</p> <pre><code>backend/\n\u251c\u2500\u2500 api/                  # FastAPI application\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 config.py         # Configuration settings\n\u2502   \u251c\u2500\u2500 main.py           # Application entry point\n\u2502   \u2514\u2500\u2500 routes.py         # API endpoints\n\u251c\u2500\u2500 services/             # Business logic\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 example_service.py\n\u251c\u2500\u2500 tests/                # Test files\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 test_example_service.py\n\u251c\u2500\u2500 pyproject.toml        # Project configuration\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"backend-development/#api-endpoints","title":"API Endpoints","text":"<p>The template includes several example endpoints in <code>api/routes.py</code>:</p> <ul> <li><code>GET /</code>: Root endpoint returning a welcome message</li> <li><code>GET /healthcheck</code>: Health check endpoint</li> <li><code>GET /api/example</code>: Simple example endpoint</li> <li><code>GET /api/examples</code>: Returns a list of examples from the example service</li> <li><code>GET /api/examples/{example_id}</code>: Returns a specific example by ID</li> </ul>"},{"location":"backend-development/#adding-new-endpoints","title":"Adding New Endpoints","text":"<p>To add a new endpoint, follow these steps:</p> <ol> <li>Create a new service in the <code>services</code> directory if needed</li> <li>Add the endpoint to <code>api/routes.py</code></li> <li>Update API documentation as needed</li> </ol> <p>Example:</p> <pre><code>@router.get(\"/api/new-endpoint\")\nasync def new_endpoint() -&gt; Dict[str, str]:\n    \"\"\"New endpoint description.\n\n    Returns\n    -------\n    Dict[str, str]\n        Response data.\n    \"\"\"\n    return {\"message\": \"This is a new endpoint\"}\n</code></pre>"},{"location":"backend-development/#services","title":"Services","text":"<p>The services directory contains the business logic of your application. The template includes an example service (<code>example_service.py</code>) that demonstrates a simple data service.</p>"},{"location":"backend-development/#adding-a-new-service","title":"Adding a New Service","text":"<p>Create a new file in the <code>services</code> directory:</p> <pre><code>\"\"\"New service module.\"\"\"\n\nclass NewService:\n    \"\"\"New service class.\"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the new service.\"\"\"\n        pass\n\n    def some_method(self) -&gt; str:\n        \"\"\"Do something.\n\n        Returns\n        -------\n        str\n            Result of the operation.\n        \"\"\"\n        return \"Result\"\n</code></pre>"},{"location":"backend-development/#testing","title":"Testing","text":"<p>The template uses pytest for testing. Tests are located in the <code>tests</code> directory.</p>"},{"location":"backend-development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run tests with coverage report\npytest --cov=api --cov=services\n</code></pre>"},{"location":"backend-development/#writing-tests","title":"Writing Tests","text":"<p>Here's an example of a test for a new service:</p> <pre><code>\"\"\"Tests for new service.\"\"\"\n\nfrom services.new_service import NewService\n\nclass TestNewService:\n    \"\"\"Tests for NewService.\"\"\"\n\n    def setup_method(self) -&gt; None:\n        \"\"\"Set up test fixtures.\"\"\"\n        self.service = NewService()\n\n    def test_some_method(self) -&gt; None:\n        \"\"\"Test some_method.\"\"\"\n        result = self.service.some_method()\n        assert result == \"Result\"\n</code></pre>"},{"location":"backend-development/#code-quality","title":"Code Quality","text":"<p>The template includes configuration for several code quality tools:</p> <ul> <li>Ruff: For linting and formatting</li> <li>MyPy: For type checking</li> <li>Pytest: For testing</li> </ul>"},{"location":"backend-development/#running-linting","title":"Running Linting","text":"<pre><code># Run ruff for linting\nruff check .\n\n# Run mypy for type checking\nmypy .\n</code></pre>"},{"location":"backend-development/#api-documentation","title":"API Documentation","text":"<p>FastAPI automatically generates interactive API documentation. When the server is running, you can access:</p> <ul> <li>Swagger UI: http://localhost:8000/docs</li> <li>ReDoc: http://localhost:8000/redoc</li> </ul>"},{"location":"docker-deployment/","title":"Docker and Deployment","text":"<p>This guide covers Docker configuration and deployment strategies for the MVP template.</p>"},{"location":"docker-deployment/#docker-configuration","title":"Docker Configuration","text":"<p>The template includes Docker configuration for both development and production environments.</p>"},{"location":"docker-deployment/#docker-files","title":"Docker Files","text":"<ul> <li><code>docker-compose.dev.yml</code>: Development environment configuration</li> <li><code>docker-compose.yml</code>: Production environment configuration</li> <li><code>frontend/Dockerfile.dev</code>: Frontend development container configuration</li> <li><code>frontend/Dockerfile</code>: Frontend production container configuration</li> <li><code>backend/Dockerfile.dev</code>: Backend development container configuration</li> <li><code>backend/Dockerfile</code>: Backend production container configuration</li> </ul>"},{"location":"docker-deployment/#environment-variables","title":"Environment Variables","text":"<p>Docker Compose uses environment variables defined in these files:</p> <ul> <li><code>.env.development</code>: Development environment variables</li> <li><code>.env.production</code>: Production environment variables</li> </ul> <p>The template includes <code>.env.example</code> as a starting point.</p>"},{"location":"docker-deployment/#development-with-docker","title":"Development with Docker","text":"<p>Start the development environment:</p> <pre><code>docker compose --env-file .env.development -f docker-compose.dev.yml up\n</code></pre> <p>This will start: - Frontend development server with hot reloading - Backend API server with hot reloading - Any other services defined in <code>docker-compose.dev.yml</code></p>"},{"location":"docker-deployment/#volume-mounts","title":"Volume Mounts","text":"<p>In development mode, the source code directories are mounted as volumes, allowing for hot reloading:</p> <pre><code>volumes:\n  - ./frontend:/app\n  - /app/node_modules\n</code></pre>"},{"location":"docker-deployment/#production-deployment","title":"Production Deployment","text":"<p>Build and run for production:</p> <pre><code># Set the BUILD_ID environment variable\nexport BUILD_ID=$(date +%Y%m%d%H%M%S)\n\n# Build the containers\ndocker compose --env-file .env.production -f docker-compose.yml build\n\n# Run the containers\ndocker compose --env-file .env.production -f docker-compose.yml up -d\n</code></pre> <p>Or use the included build script:</p> <pre><code>ENVIRONMENT=production ./build.sh\ndocker compose --env-file .env.production -f docker-compose.yml up -d\n</code></pre>"},{"location":"docker-deployment/#container-registry-deployment","title":"Container Registry Deployment","text":"<p>To push images to a container registry:</p> <ol> <li>Update the image names in <code>docker-compose.yml</code>:</li> </ol> <pre><code>image: your-registry.com/your-username/your-project:frontend-${BUILD_ID:-latest}\n</code></pre> <ol> <li>Build and push the images:</li> </ol> <pre><code># Build the containers\ndocker compose --env-file .env.production -f docker-compose.yml build\n\n# Push the containers\ndocker compose --env-file .env.production -f docker-compose.yml push\n</code></pre>"},{"location":"docker-deployment/#customizing-docker-configuration","title":"Customizing Docker Configuration","text":""},{"location":"docker-deployment/#adding-new-services","title":"Adding New Services","text":"<p>To add a new service, add a new section to the Docker Compose files:</p> <pre><code>new-service:\n  build:\n    context: ./new-service\n    dockerfile: Dockerfile\n  environment:\n    - VARIABLE=value\n  ports:\n    - \"1234:1234\"\n  networks:\n    - app-network\n</code></pre>"},{"location":"docker-deployment/#customizing-resource-limits","title":"Customizing Resource Limits","text":"<p>You can add resource limits to your services:</p> <pre><code>services:\n  backend:\n    # ... other configuration\n    deploy:\n      resources:\n        limits:\n          cpus: '0.5'\n          memory: 512M\n</code></pre>"},{"location":"docker-deployment/#continuous-deployment","title":"Continuous Deployment","text":"<p>The template includes a GitHub Actions workflow in <code>.github/workflows/ci.yml</code> that can be extended for continuous deployment:</p> <pre><code>deploy:\n  needs: [backend-tests, frontend-tests]\n  runs-on: ubuntu-latest\n  if: github.ref == 'refs/heads/main'\n  steps:\n    - uses: actions/checkout@v3\n    - name: Deploy to production\n      run: |\n        # Add your deployment steps here\n        echo \"Deploying to production...\"\n</code></pre>"},{"location":"docker-deployment/#secrets-management","title":"Secrets Management","text":"<p>For production deployments, you should use a secrets management solution:</p> <ol> <li>Docker Swarm secrets</li> <li>Kubernetes secrets</li> <li>Environment variable encryption</li> </ol> <p>Example using Docker Swarm secrets:</p> <pre><code># Create a secret\necho \"my-secret-value\" | docker secret create my_secret -\n\n# Reference the secret in docker-compose.yml\nsecrets:\n  my_secret:\n    external: true\n\nservices:\n  backend:\n    secrets:\n      - my_secret\n</code></pre>"},{"location":"docker-deployment/#health-checks","title":"Health Checks","text":"<p>The template includes health checks for services. You can customize these in the Docker Compose files:</p> <pre><code>healthcheck:\n  test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/healthcheck\"]\n  interval: 10s\n  timeout: 5s\n  retries: 5\n</code></pre>"},{"location":"frontend-development/","title":"Frontend Development","text":"<p>This guide covers the key aspects of frontend development using Next.js in this template.</p>"},{"location":"frontend-development/#environment-setup","title":"Environment Setup","text":"<pre><code># Navigate to the frontend directory\ncd frontend\n\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm run dev\n</code></pre> <p>This will start the Next.js development server with hot reloading at http://localhost:3000.</p>"},{"location":"frontend-development/#project-structure","title":"Project Structure","text":"<p>The frontend is organized following the Next.js App Router structure:</p> <pre><code>frontend/\n\u251c\u2500\u2500 public/              # Static files\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 app/            # Next.js App Router\n\u2502   \u2502   \u251c\u2500\u2500 components/ # React components\n\u2502   \u2502   \u251c\u2500\u2500 stores/     # Zustand state management\n\u2502   \u2502   \u251c\u2500\u2500 types/      # TypeScript types\n\u2502   \u2502   \u251c\u2500\u2500 globals.css # Global styles\n\u2502   \u2502   \u251c\u2500\u2500 layout.tsx  # Root layout\n\u2502   \u2502   \u2514\u2500\u2500 page.tsx    # Home page\n\u251c\u2500\u2500 next.config.mjs     # Next.js configuration\n\u251c\u2500\u2500 package.json        # Dependencies and scripts\n\u251c\u2500\u2500 tailwind.config.ts  # Tailwind CSS configuration\n\u2514\u2500\u2500 tsconfig.json       # TypeScript configuration\n</code></pre>"},{"location":"frontend-development/#key-features","title":"Key Features","text":""},{"location":"frontend-development/#components","title":"Components","text":"<p>The template includes several example components:</p> <ul> <li><code>Header</code>: A simple header component</li> <li><code>ApiExample</code>: An example component that fetches data from the backend API</li> </ul>"},{"location":"frontend-development/#state-management","title":"State Management","text":"<p>The template uses Zustand for state management, which is a lightweight state management library.</p> <p>Example state in <code>src/app/stores/app-store.ts</code>:</p> <pre><code>import { create } from 'zustand';\n\ninterface AppState {\n  isLoading: boolean;\n  setIsLoading: (isLoading: boolean) =&gt; void;\n}\n\nexport const useAppStore = create&lt;AppState&gt;((set) =&gt; ({\n  isLoading: false,\n  setIsLoading: (isLoading: boolean) =&gt; set({ isLoading }),\n}));\n</code></pre>"},{"location":"frontend-development/#typescript-types","title":"TypeScript Types","text":"<p>The template uses TypeScript for type safety. Common types are defined in the <code>src/app/types</code> directory.</p>"},{"location":"frontend-development/#styling","title":"Styling","text":"<p>The template uses Tailwind CSS for styling.</p>"},{"location":"frontend-development/#api-communication","title":"API Communication","text":"<p>The template includes an example of how to communicate with the backend API:</p> <pre><code>const fetchApiExample = async () =&gt; {\n  try {\n    const backendHost = process.env.NEXT_PUBLIC_BACKEND_HOST || 'localhost';\n    const backendPort = process.env.NEXT_PUBLIC_BACKEND_PORT || '8000';\n    const response = await fetch(`http://${backendHost}:${backendPort}/api/example`);\n\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error('Error fetching API example:', err);\n    throw err;\n  }\n};\n</code></pre>"},{"location":"frontend-development/#adding-new-pages","title":"Adding New Pages","text":"<p>With Next.js App Router, creating new pages is straightforward:</p> <ol> <li>Create a new directory under <code>src/app</code></li> <li>Add a <code>page.tsx</code> file in that directory</li> </ol> <p>For example, to create an \"About\" page:</p> <pre><code>src/app/about/page.tsx\n</code></pre> <pre><code>export default function AboutPage() {\n  return (\n    &lt;div className=\"container mx-auto py-8\"&gt;\n      &lt;h1 className=\"text-2xl font-bold\"&gt;About&lt;/h1&gt;\n      &lt;p className=\"mt-4\"&gt;This is the about page.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"frontend-development/#building-for-production","title":"Building for Production","text":"<p>To build the frontend for production:</p> <pre><code>npm run build\n</code></pre> <p>The built files will be in the <code>.next</code> directory.</p>"},{"location":"frontend-development/#code-quality","title":"Code Quality","text":"<p>The template includes configuration for several code quality tools:</p> <ul> <li>ESLint: For linting</li> <li>TypeScript: For type checking</li> </ul> <p>To run linting:</p> <pre><code>npm run lint\n</code></pre>"},{"location":"frontend-development/#testing","title":"Testing","text":"<p>You can add tests to the frontend using testing libraries like Jest and React Testing Library:</p> <ol> <li>Install testing dependencies:</li> </ol> <pre><code>npm install --save-dev jest @testing-library/react @testing-library/jest-dom\n</code></pre> <ol> <li>Create a test file, e.g., <code>src/app/components/Header.test.tsx</code></li> </ol>"},{"location":"frontend-development/#customizing-the-template","title":"Customizing the Template","text":""},{"location":"frontend-development/#changing-theme-and-styling","title":"Changing Theme and Styling","text":"<p>The template uses Tailwind CSS for styling. You can customize the theme in <code>tailwind.config.ts</code>:</p> <pre><code>import type { Config } from \"tailwindcss\";\n\nconst config: Config = {\n  content: [\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: \"#0070f3\",\n        secondary: \"#1f2937\",\n      },\n    },\n  },\n  plugins: [],\n};\nexport default config;\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with the AI Engineering MVP Template.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following installed:</p> <ul> <li>Docker &amp; Docker Compose (v20.10.0+)</li> <li>Python (3.12+)</li> <li>Node.js (18.0.0+)</li> <li><code>uv</code> for Python package management</li> </ul>"},{"location":"getting-started/#using-this-template","title":"Using This Template","text":""},{"location":"getting-started/#1-create-a-new-repository","title":"1. Create a New Repository","text":"<p>Start by clicking the \"Use this template\" button at the top of the repository page on GitHub. This will create a new repository with all the template files.</p>"},{"location":"getting-started/#2-clone-your-new-repository","title":"2. Clone Your New Repository","text":"<pre><code>git clone https://github.com/yourusername/your-new-repo.git\ncd your-new-repo\n</code></pre>"},{"location":"getting-started/#3-configure-environment-variables","title":"3. Configure Environment Variables","text":"<p>Copy the example environment file and customize it for your project:</p> <pre><code>cp .env.example .env.development\n</code></pre> <p>Edit the <code>.env.development</code> file to set your project-specific values.</p>"},{"location":"getting-started/#4-start-development-services","title":"4. Start Development Services","text":"<p>The easiest way to start development is with Docker Compose:</p> <pre><code>docker compose --env-file .env.development -f docker-compose.dev.yml up\n</code></pre> <p>This will start both the frontend and backend services in development mode with hot reloading.</p>"},{"location":"getting-started/#5-access-the-services","title":"5. Access the Services","text":"<ul> <li>Frontend: http://localhost:3000</li> <li>Backend API: http://localhost:8000</li> <li>API Documentation: http://localhost:8000/docs</li> </ul>"},{"location":"getting-started/#development-without-docker","title":"Development Without Docker","text":"<p>If you prefer to run the services directly on your machine:</p>"},{"location":"getting-started/#frontend","title":"Frontend","text":"<pre><code>cd frontend\nnpm install\nnpm run dev\n</code></pre>"},{"location":"getting-started/#backend","title":"Backend","text":"<pre><code>cd backend\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e \".[dev]\"\nuvicorn api.main:app --reload\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Once you have the template set up, you can start customizing it for your specific application needs:</p> <ol> <li>Update the README.md with your project information</li> <li>Customize the frontend UI components</li> <li>Add your business logic to the backend services</li> <li>Set up your CI/CD pipeline</li> </ol> <p>See the Backend Development and Frontend Development guides for more details.</p>"},{"location":"template-preview/","title":"AI Engineering MVP Template Preview","text":"<p>Interactive Preview</p> <p>This page embeds the Vector Institute UI template. Click the button below to view the template UI.</p>      Open Template UI"},{"location":"template-preview/#about-the-template-ui","title":"About the Template UI","text":"<p>The AI Engineering MVP Template provides a clean, simple interface that adheres to Vector's branding guidelines:</p> <ul> <li>Brand Colors: Incorporates Vector's signature pink (#eb088a) and purple (#8a08eb)</li> <li>Clean Design: Minimalist interface with Vector branding</li> <li>Responsive Layout: Adapts to various screen sizes and devices</li> </ul>"},{"location":"template-preview/#how-to-use","title":"How to Use","text":"<p>To use this template in your project:</p> <ol> <li>Clone the repository</li> <li>Navigate to the <code>frontend</code> directory</li> <li>Install dependencies with <code>npm install</code></li> <li>Start the development server with <code>npm run dev</code></li> </ol> <p>For more details, see the Frontend Development documentation.</p>"}]}